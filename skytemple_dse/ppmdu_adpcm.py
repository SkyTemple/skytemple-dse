# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ppmdu_adpcm
else:
    import _ppmdu_adpcm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ppmdu_adpcm.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _ppmdu_adpcm.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _ppmdu_adpcm.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _ppmdu_adpcm.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ppmdu_adpcm.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ppmdu_adpcm.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _ppmdu_adpcm.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _ppmdu_adpcm.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _ppmdu_adpcm.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _ppmdu_adpcm.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ppmdu_adpcm.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ppmdu_adpcm.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ppmdu_adpcm.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ppmdu_adpcm.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ppmdu_adpcm.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _ppmdu_adpcm.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _ppmdu_adpcm.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ppmdu_adpcm:
_ppmdu_adpcm.SwigPyIterator_swigregister(SwigPyIterator)

class Uint8Vector(object):
    r"""Proxy of C++ std::vector< uint8_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Uint8Vector self) -> SwigPyIterator"""
        return _ppmdu_adpcm.Uint8Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Uint8Vector self) -> bool"""
        return _ppmdu_adpcm.Uint8Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Uint8Vector self) -> bool"""
        return _ppmdu_adpcm.Uint8Vector___bool__(self)

    def __len__(self):
        r"""__len__(Uint8Vector self) -> std::vector< unsigned char >::size_type"""
        return _ppmdu_adpcm.Uint8Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j) -> Uint8Vector

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        """
        return _ppmdu_adpcm.Uint8Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        __setslice__(Uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j, Uint8Vector v)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type
        v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        """
        return _ppmdu_adpcm.Uint8Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::difference_type j)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        j: std::vector< unsigned char >::difference_type

        """
        return _ppmdu_adpcm.Uint8Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Uint8Vector self, std::vector< unsigned char >::difference_type i)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type

        __delitem__(Uint8Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ppmdu_adpcm.Uint8Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Uint8Vector self, PySliceObject * slice) -> Uint8Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Uint8Vector self, std::vector< unsigned char >::difference_type i) -> std::vector< unsigned char >::value_type const &

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type

        """
        return _ppmdu_adpcm.Uint8Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Uint8Vector self, PySliceObject * slice, Uint8Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< unsigned char,std::allocator< unsigned char > > const &

        __setitem__(Uint8Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Uint8Vector self, std::vector< unsigned char >::difference_type i, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        i: std::vector< unsigned char >::difference_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _ppmdu_adpcm.Uint8Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Uint8Vector self) -> std::vector< unsigned char >::value_type"""
        return _ppmdu_adpcm.Uint8Vector_pop(self)

    def append(self, x):
        r"""
        append(Uint8Vector self, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned char >::value_type const &

        """
        return _ppmdu_adpcm.Uint8Vector_append(self, x)

    def empty(self):
        r"""empty(Uint8Vector self) -> bool"""
        return _ppmdu_adpcm.Uint8Vector_empty(self)

    def size(self):
        r"""size(Uint8Vector self) -> std::vector< unsigned char >::size_type"""
        return _ppmdu_adpcm.Uint8Vector_size(self)

    def swap(self, v):
        r"""
        swap(Uint8Vector self, Uint8Vector v)

        Parameters
        ----------
        v: std::vector< uint8_t > &

        """
        return _ppmdu_adpcm.Uint8Vector_swap(self, v)

    def begin(self):
        r"""begin(Uint8Vector self) -> std::vector< unsigned char >::iterator"""
        return _ppmdu_adpcm.Uint8Vector_begin(self)

    def end(self):
        r"""end(Uint8Vector self) -> std::vector< unsigned char >::iterator"""
        return _ppmdu_adpcm.Uint8Vector_end(self)

    def rbegin(self):
        r"""rbegin(Uint8Vector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _ppmdu_adpcm.Uint8Vector_rbegin(self)

    def rend(self):
        r"""rend(Uint8Vector self) -> std::vector< unsigned char >::reverse_iterator"""
        return _ppmdu_adpcm.Uint8Vector_rend(self)

    def clear(self):
        r"""clear(Uint8Vector self)"""
        return _ppmdu_adpcm.Uint8Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Uint8Vector self) -> std::vector< unsigned char >::allocator_type"""
        return _ppmdu_adpcm.Uint8Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Uint8Vector self)"""
        return _ppmdu_adpcm.Uint8Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Uint8Vector self, std::vector< unsigned char >::iterator pos) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator

        erase(Uint8Vector self, std::vector< unsigned char >::iterator first, std::vector< unsigned char >::iterator last) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        first: std::vector< unsigned char >::iterator
        last: std::vector< unsigned char >::iterator

        """
        return _ppmdu_adpcm.Uint8Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Uint8Vector self) -> Uint8Vector
        __init__(Uint8Vector self, Uint8Vector other) -> Uint8Vector

        Parameters
        ----------
        other: std::vector< uint8_t > const &

        __init__(Uint8Vector self, std::vector< unsigned char >::size_type size) -> Uint8Vector

        Parameters
        ----------
        size: std::vector< unsigned char >::size_type

        __init__(Uint8Vector self, std::vector< unsigned char >::size_type size, std::vector< unsigned char >::value_type const & value) -> Uint8Vector

        Parameters
        ----------
        size: std::vector< unsigned char >::size_type
        value: std::vector< unsigned char >::value_type const &

        """
        _ppmdu_adpcm.Uint8Vector_swiginit(self, _ppmdu_adpcm.new_Uint8Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Uint8Vector self, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< unsigned char >::value_type const &

        """
        return _ppmdu_adpcm.Uint8Vector_push_back(self, x)

    def front(self):
        r"""front(Uint8Vector self) -> std::vector< unsigned char >::value_type const &"""
        return _ppmdu_adpcm.Uint8Vector_front(self)

    def back(self):
        r"""back(Uint8Vector self) -> std::vector< unsigned char >::value_type const &"""
        return _ppmdu_adpcm.Uint8Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Uint8Vector self, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        n: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _ppmdu_adpcm.Uint8Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Uint8Vector self, std::vector< unsigned char >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< unsigned char >::size_type

        resize(Uint8Vector self, std::vector< unsigned char >::size_type new_size, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _ppmdu_adpcm.Uint8Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Uint8Vector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::value_type const & x) -> std::vector< unsigned char >::iterator

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator
        x: std::vector< unsigned char >::value_type const &

        insert(Uint8Vector self, std::vector< unsigned char >::iterator pos, std::vector< unsigned char >::size_type n, std::vector< unsigned char >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< unsigned char >::iterator
        n: std::vector< unsigned char >::size_type
        x: std::vector< unsigned char >::value_type const &

        """
        return _ppmdu_adpcm.Uint8Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Uint8Vector self, std::vector< unsigned char >::size_type n)

        Parameters
        ----------
        n: std::vector< unsigned char >::size_type

        """
        return _ppmdu_adpcm.Uint8Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Uint8Vector self) -> std::vector< unsigned char >::size_type"""
        return _ppmdu_adpcm.Uint8Vector_capacity(self)
    __swig_destroy__ = _ppmdu_adpcm.delete_Uint8Vector

# Register Uint8Vector in _ppmdu_adpcm:
_ppmdu_adpcm.Uint8Vector_swigregister(Uint8Vector)

class Int16Vector(object):
    r"""Proxy of C++ std::vector< int16_t > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(Int16Vector self) -> SwigPyIterator"""
        return _ppmdu_adpcm.Int16Vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(Int16Vector self) -> bool"""
        return _ppmdu_adpcm.Int16Vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(Int16Vector self) -> bool"""
        return _ppmdu_adpcm.Int16Vector___bool__(self)

    def __len__(self):
        r"""__len__(Int16Vector self) -> std::vector< short >::size_type"""
        return _ppmdu_adpcm.Int16Vector___len__(self)

    def __getslice__(self, i, j):
        r"""
        __getslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j) -> Int16Vector

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        """
        return _ppmdu_adpcm.Int16Vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        __setslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j, Int16Vector v)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type
        v: std::vector< short,std::allocator< short > > const &

        """
        return _ppmdu_adpcm.Int16Vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""
        __delslice__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::difference_type j)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        j: std::vector< short >::difference_type

        """
        return _ppmdu_adpcm.Int16Vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(Int16Vector self, std::vector< short >::difference_type i)

        Parameters
        ----------
        i: std::vector< short >::difference_type

        __delitem__(Int16Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _ppmdu_adpcm.Int16Vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(Int16Vector self, PySliceObject * slice) -> Int16Vector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(Int16Vector self, std::vector< short >::difference_type i) -> std::vector< short >::value_type const &

        Parameters
        ----------
        i: std::vector< short >::difference_type

        """
        return _ppmdu_adpcm.Int16Vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(Int16Vector self, PySliceObject * slice, Int16Vector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< short,std::allocator< short > > const &

        __setitem__(Int16Vector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(Int16Vector self, std::vector< short >::difference_type i, std::vector< short >::value_type const & x)

        Parameters
        ----------
        i: std::vector< short >::difference_type
        x: std::vector< short >::value_type const &

        """
        return _ppmdu_adpcm.Int16Vector___setitem__(self, *args)

    def pop(self):
        r"""pop(Int16Vector self) -> std::vector< short >::value_type"""
        return _ppmdu_adpcm.Int16Vector_pop(self)

    def append(self, x):
        r"""
        append(Int16Vector self, std::vector< short >::value_type const & x)

        Parameters
        ----------
        x: std::vector< short >::value_type const &

        """
        return _ppmdu_adpcm.Int16Vector_append(self, x)

    def empty(self):
        r"""empty(Int16Vector self) -> bool"""
        return _ppmdu_adpcm.Int16Vector_empty(self)

    def size(self):
        r"""size(Int16Vector self) -> std::vector< short >::size_type"""
        return _ppmdu_adpcm.Int16Vector_size(self)

    def swap(self, v):
        r"""
        swap(Int16Vector self, Int16Vector v)

        Parameters
        ----------
        v: std::vector< int16_t > &

        """
        return _ppmdu_adpcm.Int16Vector_swap(self, v)

    def begin(self):
        r"""begin(Int16Vector self) -> std::vector< short >::iterator"""
        return _ppmdu_adpcm.Int16Vector_begin(self)

    def end(self):
        r"""end(Int16Vector self) -> std::vector< short >::iterator"""
        return _ppmdu_adpcm.Int16Vector_end(self)

    def rbegin(self):
        r"""rbegin(Int16Vector self) -> std::vector< short >::reverse_iterator"""
        return _ppmdu_adpcm.Int16Vector_rbegin(self)

    def rend(self):
        r"""rend(Int16Vector self) -> std::vector< short >::reverse_iterator"""
        return _ppmdu_adpcm.Int16Vector_rend(self)

    def clear(self):
        r"""clear(Int16Vector self)"""
        return _ppmdu_adpcm.Int16Vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(Int16Vector self) -> std::vector< short >::allocator_type"""
        return _ppmdu_adpcm.Int16Vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(Int16Vector self)"""
        return _ppmdu_adpcm.Int16Vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(Int16Vector self, std::vector< short >::iterator pos) -> std::vector< short >::iterator

        Parameters
        ----------
        pos: std::vector< short >::iterator

        erase(Int16Vector self, std::vector< short >::iterator first, std::vector< short >::iterator last) -> std::vector< short >::iterator

        Parameters
        ----------
        first: std::vector< short >::iterator
        last: std::vector< short >::iterator

        """
        return _ppmdu_adpcm.Int16Vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(Int16Vector self) -> Int16Vector
        __init__(Int16Vector self, Int16Vector other) -> Int16Vector

        Parameters
        ----------
        other: std::vector< int16_t > const &

        __init__(Int16Vector self, std::vector< short >::size_type size) -> Int16Vector

        Parameters
        ----------
        size: std::vector< short >::size_type

        __init__(Int16Vector self, std::vector< short >::size_type size, std::vector< short >::value_type const & value) -> Int16Vector

        Parameters
        ----------
        size: std::vector< short >::size_type
        value: std::vector< short >::value_type const &

        """
        _ppmdu_adpcm.Int16Vector_swiginit(self, _ppmdu_adpcm.new_Int16Vector(*args))

    def push_back(self, x):
        r"""
        push_back(Int16Vector self, std::vector< short >::value_type const & x)

        Parameters
        ----------
        x: std::vector< short >::value_type const &

        """
        return _ppmdu_adpcm.Int16Vector_push_back(self, x)

    def front(self):
        r"""front(Int16Vector self) -> std::vector< short >::value_type const &"""
        return _ppmdu_adpcm.Int16Vector_front(self)

    def back(self):
        r"""back(Int16Vector self) -> std::vector< short >::value_type const &"""
        return _ppmdu_adpcm.Int16Vector_back(self)

    def assign(self, n, x):
        r"""
        assign(Int16Vector self, std::vector< short >::size_type n, std::vector< short >::value_type const & x)

        Parameters
        ----------
        n: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _ppmdu_adpcm.Int16Vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(Int16Vector self, std::vector< short >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< short >::size_type

        resize(Int16Vector self, std::vector< short >::size_type new_size, std::vector< short >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _ppmdu_adpcm.Int16Vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(Int16Vector self, std::vector< short >::iterator pos, std::vector< short >::value_type const & x) -> std::vector< short >::iterator

        Parameters
        ----------
        pos: std::vector< short >::iterator
        x: std::vector< short >::value_type const &

        insert(Int16Vector self, std::vector< short >::iterator pos, std::vector< short >::size_type n, std::vector< short >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< short >::iterator
        n: std::vector< short >::size_type
        x: std::vector< short >::value_type const &

        """
        return _ppmdu_adpcm.Int16Vector_insert(self, *args)

    def reserve(self, n):
        r"""
        reserve(Int16Vector self, std::vector< short >::size_type n)

        Parameters
        ----------
        n: std::vector< short >::size_type

        """
        return _ppmdu_adpcm.Int16Vector_reserve(self, n)

    def capacity(self):
        r"""capacity(Int16Vector self) -> std::vector< short >::size_type"""
        return _ppmdu_adpcm.Int16Vector_capacity(self)
    __swig_destroy__ = _ppmdu_adpcm.delete_Int16Vector

# Register Int16Vector in _ppmdu_adpcm:
_ppmdu_adpcm.Int16Vector_swigregister(Int16Vector)


def ADPCMSzToPCM16Sz(adpcmbytesz):
    r"""
    ADPCMSzToPCM16Sz(size_t adpcmbytesz) -> size_t

    Parameters
    ----------
    adpcmbytesz: size_t

    """
    return _ppmdu_adpcm.ADPCMSzToPCM16Sz(adpcmbytesz)

def DecodeADPCM_IMA(rawadpcmdata, nbchannels=1):
    r"""
    DecodeADPCM_IMA(Uint8Vector rawadpcmdata, unsigned int nbchannels=1) -> Int16Vector

    Parameters
    ----------
    rawadpcmdata: std::vector< uint8_t,std::allocator< uint8_t > > const &
    nbchannels: unsigned int

    """
    return _ppmdu_adpcm.DecodeADPCM_IMA(rawadpcmdata, nbchannels)

def EncodeADPCM_IMA(pcmdata, nbchannels=1):
    r"""
    EncodeADPCM_IMA(Int16Vector pcmdata, unsigned int nbchannels=1) -> Uint8Vector

    Parameters
    ----------
    pcmdata: std::vector< int16_t,std::allocator< int16_t > > const &
    nbchannels: unsigned int

    """
    return _ppmdu_adpcm.EncodeADPCM_IMA(pcmdata, nbchannels)

def DecodeADPCM_NDS(rawadpcmdata, nbchannels=1):
    r"""
    DecodeADPCM_NDS(Uint8Vector rawadpcmdata, unsigned int nbchannels=1) -> Int16Vector

    Parameters
    ----------
    rawadpcmdata: std::vector< uint8_t,std::allocator< uint8_t > > const &
    nbchannels: unsigned int

    """
    return _ppmdu_adpcm.DecodeADPCM_NDS(rawadpcmdata, nbchannels)

cvar = _ppmdu_adpcm.cvar
IMA_ADPCM_PreambleLen = cvar.IMA_ADPCM_PreambleLen

