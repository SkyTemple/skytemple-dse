# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sf2cute
else:
    import _sf2cute

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SoundFont(object):
    r"""Proxy of C++ sf2cute::SoundFont class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SoundFont self) -> SoundFont
        __init__(SoundFont self, SoundFont origin) -> SoundFont

        Parameters
        ----------
        origin: sf2cute::SoundFont const &

        __init__(SoundFont self, SoundFont origin) -> SoundFont

        Parameters
        ----------
        origin: sf2cute::SoundFont &&

        """
        _sf2cute.SoundFont_swiginit(self, _sf2cute.new_SoundFont(*args))
    __swig_destroy__ = _sf2cute.delete_SoundFont

    def presets(self):
        r"""presets(SoundFont self) -> std::vector< std::shared_ptr< sf2cute::SFPreset > > const &"""
        return _sf2cute.SoundFont_presets(self)

    def AddPreset(self, preset):
        r"""
        AddPreset(SoundFont self, std::shared_ptr< sf2cute::SFPreset > preset)

        Parameters
        ----------
        preset: std::shared_ptr< sf2cute::SFPreset >

        """
        return _sf2cute.SoundFont_AddPreset(self, preset)

    def RemovePreset(self, *args):
        r"""
        RemovePreset(SoundFont self, std::vector< std::shared_ptr< sf2cute::SFPreset > >::const_iterator position)

        Parameters
        ----------
        position: std::vector< std::shared_ptr< sf2cute::SFPreset > >::const_iterator

        RemovePreset(SoundFont self, std::vector< std::shared_ptr< sf2cute::SFPreset > >::const_iterator first, std::vector< std::shared_ptr< sf2cute::SFPreset > >::const_iterator last)

        Parameters
        ----------
        first: std::vector< std::shared_ptr< sf2cute::SFPreset > >::const_iterator
        last: std::vector< std::shared_ptr< sf2cute::SFPreset > >::const_iterator

        """
        return _sf2cute.SoundFont_RemovePreset(self, *args)

    def RemovePresetIf(self, predicate):
        r"""
        RemovePresetIf(SoundFont self, std::function< bool (std::shared_ptr< sf2cute::SFPreset > const &) > predicate)

        Parameters
        ----------
        predicate: std::function< bool (std::shared_ptr< sf2cute::SFPreset > const &) >

        """
        return _sf2cute.SoundFont_RemovePresetIf(self, predicate)

    def ClearPresets(self):
        r"""ClearPresets(SoundFont self)"""
        return _sf2cute.SoundFont_ClearPresets(self)

    def instruments(self):
        r"""instruments(SoundFont self) -> std::vector< std::shared_ptr< sf2cute::SFInstrument > > const &"""
        return _sf2cute.SoundFont_instruments(self)

    def AddInstrument(self, instrument):
        r"""
        AddInstrument(SoundFont self, std::shared_ptr< sf2cute::SFInstrument > instrument)

        Parameters
        ----------
        instrument: std::shared_ptr< sf2cute::SFInstrument >

        """
        return _sf2cute.SoundFont_AddInstrument(self, instrument)

    def RemoveInstrument(self, *args):
        r"""
        RemoveInstrument(SoundFont self, std::vector< std::shared_ptr< sf2cute::SFInstrument > >::const_iterator position)

        Parameters
        ----------
        position: std::vector< std::shared_ptr< sf2cute::SFInstrument > >::const_iterator

        RemoveInstrument(SoundFont self, std::vector< std::shared_ptr< sf2cute::SFInstrument > >::const_iterator first, std::vector< std::shared_ptr< sf2cute::SFInstrument > >::const_iterator last)

        Parameters
        ----------
        first: std::vector< std::shared_ptr< sf2cute::SFInstrument > >::const_iterator
        last: std::vector< std::shared_ptr< sf2cute::SFInstrument > >::const_iterator

        """
        return _sf2cute.SoundFont_RemoveInstrument(self, *args)

    def RemoveInstrumentIf(self, predicate):
        r"""
        RemoveInstrumentIf(SoundFont self, std::function< bool (std::shared_ptr< sf2cute::SFInstrument > const &) > predicate)

        Parameters
        ----------
        predicate: std::function< bool (std::shared_ptr< sf2cute::SFInstrument > const &) >

        """
        return _sf2cute.SoundFont_RemoveInstrumentIf(self, predicate)

    def ClearInstruments(self):
        r"""ClearInstruments(SoundFont self)"""
        return _sf2cute.SoundFont_ClearInstruments(self)

    def samples(self):
        r"""samples(SoundFont self) -> std::vector< std::shared_ptr< sf2cute::SFSample > > const &"""
        return _sf2cute.SoundFont_samples(self)

    def AddSample(self, sample):
        r"""
        AddSample(SoundFont self, std::shared_ptr< sf2cute::SFSample > sample)

        Parameters
        ----------
        sample: std::shared_ptr< sf2cute::SFSample >

        """
        return _sf2cute.SoundFont_AddSample(self, sample)

    def RemoveSample(self, *args):
        r"""
        RemoveSample(SoundFont self, std::vector< std::shared_ptr< sf2cute::SFSample > >::const_iterator position)

        Parameters
        ----------
        position: std::vector< std::shared_ptr< sf2cute::SFSample > >::const_iterator

        RemoveSample(SoundFont self, std::vector< std::shared_ptr< sf2cute::SFSample > >::const_iterator first, std::vector< std::shared_ptr< sf2cute::SFSample > >::const_iterator last)

        Parameters
        ----------
        first: std::vector< std::shared_ptr< sf2cute::SFSample > >::const_iterator
        last: std::vector< std::shared_ptr< sf2cute::SFSample > >::const_iterator

        """
        return _sf2cute.SoundFont_RemoveSample(self, *args)

    def RemoveSampleIf(self, predicate):
        r"""
        RemoveSampleIf(SoundFont self, std::function< bool (std::shared_ptr< sf2cute::SFSample > const &) > predicate)

        Parameters
        ----------
        predicate: std::function< bool (std::shared_ptr< sf2cute::SFSample > const &) >

        """
        return _sf2cute.SoundFont_RemoveSampleIf(self, predicate)

    def ClearSamples(self):
        r"""ClearSamples(SoundFont self)"""
        return _sf2cute.SoundFont_ClearSamples(self)

    def sound_engine(self):
        r"""sound_engine(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_sound_engine(self)

    def set_sound_engine(self, sound_engine):
        r"""
        set_sound_engine(SoundFont self, std::string sound_engine)

        Parameters
        ----------
        sound_engine: std::string

        """
        return _sf2cute.SoundFont_set_sound_engine(self, sound_engine)

    def bank_name(self):
        r"""bank_name(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_bank_name(self)

    def set_bank_name(self, bank_name):
        r"""
        set_bank_name(SoundFont self, std::string bank_name)

        Parameters
        ----------
        bank_name: std::string

        """
        return _sf2cute.SoundFont_set_bank_name(self, bank_name)

    def has_rom_name(self):
        r"""has_rom_name(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_rom_name(self)

    def rom_name(self):
        r"""rom_name(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_rom_name(self)

    def set_rom_name(self, rom_name):
        r"""
        set_rom_name(SoundFont self, std::string rom_name)

        Parameters
        ----------
        rom_name: std::string

        """
        return _sf2cute.SoundFont_set_rom_name(self, rom_name)

    def reset_rom_name(self):
        r"""reset_rom_name(SoundFont self)"""
        return _sf2cute.SoundFont_reset_rom_name(self)

    def has_rom_version(self):
        r"""has_rom_version(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_rom_version(self)

    def rom_version(self):
        r"""rom_version(SoundFont self) -> SFVersionTag"""
        return _sf2cute.SoundFont_rom_version(self)

    def set_rom_version(self, rom_version):
        r"""
        set_rom_version(SoundFont self, SFVersionTag rom_version)

        Parameters
        ----------
        rom_version: SFVersionTag

        """
        return _sf2cute.SoundFont_set_rom_version(self, rom_version)

    def reset_rom_version(self):
        r"""reset_rom_version(SoundFont self)"""
        return _sf2cute.SoundFont_reset_rom_version(self)

    def has_creation_date(self):
        r"""has_creation_date(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_creation_date(self)

    def creation_date(self):
        r"""creation_date(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_creation_date(self)

    def set_creation_date(self, creation_date):
        r"""
        set_creation_date(SoundFont self, std::string creation_date)

        Parameters
        ----------
        creation_date: std::string

        """
        return _sf2cute.SoundFont_set_creation_date(self, creation_date)

    def reset_creation_date(self):
        r"""reset_creation_date(SoundFont self)"""
        return _sf2cute.SoundFont_reset_creation_date(self)

    def has_engineers(self):
        r"""has_engineers(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_engineers(self)

    def engineers(self):
        r"""engineers(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_engineers(self)

    def set_engineers(self, engineers):
        r"""
        set_engineers(SoundFont self, std::string engineers)

        Parameters
        ----------
        engineers: std::string

        """
        return _sf2cute.SoundFont_set_engineers(self, engineers)

    def reset_engineers(self):
        r"""reset_engineers(SoundFont self)"""
        return _sf2cute.SoundFont_reset_engineers(self)

    def has_product(self):
        r"""has_product(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_product(self)

    def product(self):
        r"""product(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_product(self)

    def set_product(self, product):
        r"""
        set_product(SoundFont self, std::string product)

        Parameters
        ----------
        product: std::string

        """
        return _sf2cute.SoundFont_set_product(self, product)

    def reset_product(self):
        r"""reset_product(SoundFont self)"""
        return _sf2cute.SoundFont_reset_product(self)

    def has_copyright(self):
        r"""has_copyright(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_copyright(self)

    def copyright(self):
        r"""copyright(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_copyright(self)

    def set_copyright(self, copyright):
        r"""
        set_copyright(SoundFont self, std::string copyright)

        Parameters
        ----------
        copyright: std::string

        """
        return _sf2cute.SoundFont_set_copyright(self, copyright)

    def reset_copyright(self):
        r"""reset_copyright(SoundFont self)"""
        return _sf2cute.SoundFont_reset_copyright(self)

    def has_comment(self):
        r"""has_comment(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_comment(self)

    def comment(self):
        r"""comment(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_comment(self)

    def set_comment(self, comment):
        r"""
        set_comment(SoundFont self, std::string comment)

        Parameters
        ----------
        comment: std::string

        """
        return _sf2cute.SoundFont_set_comment(self, comment)

    def reset_comment(self):
        r"""reset_comment(SoundFont self)"""
        return _sf2cute.SoundFont_reset_comment(self)

    def has_software(self):
        r"""has_software(SoundFont self) -> bool"""
        return _sf2cute.SoundFont_has_software(self)

    def software(self):
        r"""software(SoundFont self) -> std::string const &"""
        return _sf2cute.SoundFont_software(self)

    def set_software(self, software):
        r"""
        set_software(SoundFont self, std::string software)

        Parameters
        ----------
        software: std::string

        """
        return _sf2cute.SoundFont_set_software(self, software)

    def reset_software(self):
        r"""reset_software(SoundFont self)"""
        return _sf2cute.SoundFont_reset_software(self)

    def Write(self, *args):
        r"""
        Write(SoundFont self, std::string const & filename)

        Parameters
        ----------
        filename: std::string const &

        Write(SoundFont self, std::ostream & out)

        Parameters
        ----------
        out: std::ostream &

        Write(SoundFont self, std::ostream && out)

        Parameters
        ----------
        out: std::ostream &&

        """
        return _sf2cute.SoundFont_Write(self, *args)

# Register SoundFont in _sf2cute:
_sf2cute.SoundFont_swigregister(SoundFont)

class SFGeneratorItem(object):
    r"""Proxy of C++ sf2cute::SFGeneratorItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFGeneratorItem self) -> SFGeneratorItem
        __init__(SFGeneratorItem self, SFGenerator op, GenAmountType amount) -> SFGeneratorItem

        Parameters
        ----------
        op: SFGenerator
        amount: GenAmountType

        __init__(SFGeneratorItem self, SFGeneratorItem origin) -> SFGeneratorItem

        Parameters
        ----------
        origin: sf2cute::SFGeneratorItem const &

        __init__(SFGeneratorItem self, SFGeneratorItem origin) -> SFGeneratorItem

        Parameters
        ----------
        origin: sf2cute::SFGeneratorItem &&

        """
        _sf2cute.SFGeneratorItem_swiginit(self, _sf2cute.new_SFGeneratorItem(*args))
    __swig_destroy__ = _sf2cute.delete_SFGeneratorItem

    def op(self):
        r"""op(SFGeneratorItem self) -> SFGenerator"""
        return _sf2cute.SFGeneratorItem_op(self)

    def set_op(self, op):
        r"""
        set_op(SFGeneratorItem self, SFGenerator op)

        Parameters
        ----------
        op: SFGenerator

        """
        return _sf2cute.SFGeneratorItem_set_op(self, op)

    def amount(self):
        r"""amount(SFGeneratorItem self) -> GenAmountType"""
        return _sf2cute.SFGeneratorItem_amount(self)

    def set_amount(self, *args):
        r"""
        set_amount(SFGeneratorItem self, GenAmountType amount)

        Parameters
        ----------
        amount: GenAmountType

        set_amount(SFGeneratorItem self, uint8_t lo, uint8_t hi)

        Parameters
        ----------
        lo: uint8_t
        hi: uint8_t

        set_amount(SFGeneratorItem self, int16_t amount)

        Parameters
        ----------
        amount: int16_t

        set_amount(SFGeneratorItem self, uint16_t amount)

        Parameters
        ----------
        amount: uint16_t

        """
        return _sf2cute.SFGeneratorItem_set_amount(self, *args)

    @staticmethod
    def Compare(x, y):
        r"""
        Compare(SFGenerator const & x, SFGenerator const & y) -> bool

        Parameters
        ----------
        x: SFGenerator const &
        y: SFGenerator const &

        """
        return _sf2cute.SFGeneratorItem_Compare(x, y)

# Register SFGeneratorItem in _sf2cute:
_sf2cute.SFGeneratorItem_swigregister(SFGeneratorItem)

def SFGeneratorItem_Compare(x, y):
    r"""
    SFGeneratorItem_Compare(SFGenerator const & x, SFGenerator const & y) -> bool

    Parameters
    ----------
    x: SFGenerator const &
    y: SFGenerator const &

    """
    return _sf2cute.SFGeneratorItem_Compare(x, y)

class SFInstrument(object):
    r"""Proxy of C++ sf2cute::SFInstrument class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFInstrument self) -> SFInstrument
        __init__(SFInstrument self, std::string name) -> SFInstrument

        Parameters
        ----------
        name: std::string

        __init__(SFInstrument self, std::string name, std::vector< sf2cute::SFInstrumentZone > zones) -> SFInstrument

        Parameters
        ----------
        name: std::string
        zones: std::vector< sf2cute::SFInstrumentZone >

        __init__(SFInstrument self, std::string name, std::vector< sf2cute::SFInstrumentZone > zones, SFInstrumentZone global_zone) -> SFInstrument

        Parameters
        ----------
        name: std::string
        zones: std::vector< sf2cute::SFInstrumentZone >
        global_zone: sf2cute::SFInstrumentZone

        __init__(SFInstrument self, SFInstrument origin) -> SFInstrument

        Parameters
        ----------
        origin: sf2cute::SFInstrument const &

        __init__(SFInstrument self, SFInstrument origin) -> SFInstrument

        Parameters
        ----------
        origin: sf2cute::SFInstrument &&

        """
        _sf2cute.SFInstrument_swiginit(self, _sf2cute.new_SFInstrument(*args))
    __swig_destroy__ = _sf2cute.delete_SFInstrument

    def name(self):
        r"""name(SFInstrument self) -> std::string const &"""
        return _sf2cute.SFInstrument_name(self)

    def set_name(self, name):
        r"""
        set_name(SFInstrument self, std::string name)

        Parameters
        ----------
        name: std::string

        """
        return _sf2cute.SFInstrument_set_name(self, name)

    def zones(self):
        r"""zones(SFInstrument self) -> std::vector< std::unique_ptr< sf2cute::SFInstrumentZone > > const &"""
        return _sf2cute.SFInstrument_zones(self)

    def AddZone(self, zone):
        r"""
        AddZone(SFInstrument self, SFInstrumentZone zone)

        Parameters
        ----------
        zone: sf2cute::SFInstrumentZone

        """
        return _sf2cute.SFInstrument_AddZone(self, zone)

    def RemoveZone(self, *args):
        r"""
        RemoveZone(SFInstrument self, std::vector< std::unique_ptr< sf2cute::SFInstrumentZone > >::const_iterator position)

        Parameters
        ----------
        position: std::vector< std::unique_ptr< sf2cute::SFInstrumentZone > >::const_iterator

        RemoveZone(SFInstrument self, std::vector< std::unique_ptr< sf2cute::SFInstrumentZone > >::const_iterator first, std::vector< std::unique_ptr< sf2cute::SFInstrumentZone > >::const_iterator last)

        Parameters
        ----------
        first: std::vector< std::unique_ptr< sf2cute::SFInstrumentZone > >::const_iterator
        last: std::vector< std::unique_ptr< sf2cute::SFInstrumentZone > >::const_iterator

        """
        return _sf2cute.SFInstrument_RemoveZone(self, *args)

    def RemoveZoneIf(self, predicate):
        r"""
        RemoveZoneIf(SFInstrument self, std::function< bool (std::unique_ptr< sf2cute::SFInstrumentZone > const &) > predicate)

        Parameters
        ----------
        predicate: std::function< bool (std::unique_ptr< sf2cute::SFInstrumentZone > const &) >

        """
        return _sf2cute.SFInstrument_RemoveZoneIf(self, predicate)

    def ClearZones(self):
        r"""ClearZones(SFInstrument self)"""
        return _sf2cute.SFInstrument_ClearZones(self)

    def has_global_zone(self):
        r"""has_global_zone(SFInstrument self) -> bool"""
        return _sf2cute.SFInstrument_has_global_zone(self)

    def global_zone(self):
        r"""global_zone(SFInstrument self) -> SFInstrumentZone"""
        return _sf2cute.SFInstrument_global_zone(self)

    def set_global_zone(self, global_zone):
        r"""
        set_global_zone(SFInstrument self, SFInstrumentZone global_zone)

        Parameters
        ----------
        global_zone: sf2cute::SFInstrumentZone

        """
        return _sf2cute.SFInstrument_set_global_zone(self, global_zone)

    def reset_global_zone(self):
        r"""reset_global_zone(SFInstrument self)"""
        return _sf2cute.SFInstrument_reset_global_zone(self)

    def has_parent_file(self):
        r"""has_parent_file(SFInstrument self) -> bool"""
        return _sf2cute.SFInstrument_has_parent_file(self)

    def parent_file(self):
        r"""parent_file(SFInstrument self) -> SoundFont"""
        return _sf2cute.SFInstrument_parent_file(self)

# Register SFInstrument in _sf2cute:
_sf2cute.SFInstrument_swigregister(SFInstrument)

class SFInstrumentZone(object):
    r"""Proxy of C++ sf2cute::SFInstrumentZone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFInstrumentZone self) -> SFInstrumentZone
        __init__(SFInstrumentZone self, std::weak_ptr< sf2cute::SFSample > sample) -> SFInstrumentZone

        Parameters
        ----------
        sample: std::weak_ptr< sf2cute::SFSample >

        __init__(SFInstrumentZone self, std::weak_ptr< sf2cute::SFSample > sample, std::vector< sf2cute::SFGeneratorItem > generators, std::vector< sf2cute::SFModulatorItem > modulators) -> SFInstrumentZone

        Parameters
        ----------
        sample: std::weak_ptr< sf2cute::SFSample >
        generators: std::vector< sf2cute::SFGeneratorItem >
        modulators: std::vector< sf2cute::SFModulatorItem >

        __init__(SFInstrumentZone self, SFInstrumentZone origin) -> SFInstrumentZone

        Parameters
        ----------
        origin: sf2cute::SFInstrumentZone const &

        __init__(SFInstrumentZone self, SFInstrumentZone origin) -> SFInstrumentZone

        Parameters
        ----------
        origin: sf2cute::SFInstrumentZone &&

        """
        _sf2cute.SFInstrumentZone_swiginit(self, _sf2cute.new_SFInstrumentZone(*args))
    __swig_destroy__ = _sf2cute.delete_SFInstrumentZone

    def has_sample(self):
        r"""has_sample(SFInstrumentZone self) -> bool"""
        return _sf2cute.SFInstrumentZone_has_sample(self)

    def sample(self):
        r"""sample(SFInstrumentZone self) -> std::shared_ptr< sf2cute::SFSample >"""
        return _sf2cute.SFInstrumentZone_sample(self)

    def set_sample(self, sample):
        r"""
        set_sample(SFInstrumentZone self, std::weak_ptr< sf2cute::SFSample > sample)

        Parameters
        ----------
        sample: std::weak_ptr< sf2cute::SFSample >

        """
        return _sf2cute.SFInstrumentZone_set_sample(self, sample)

    def reset_sample(self):
        r"""reset_sample(SFInstrumentZone self)"""
        return _sf2cute.SFInstrumentZone_reset_sample(self)

    def has_parent_file(self):
        r"""has_parent_file(SFInstrumentZone self) -> bool"""
        return _sf2cute.SFInstrumentZone_has_parent_file(self)

    def parent_file(self):
        r"""parent_file(SFInstrumentZone self) -> SoundFont"""
        return _sf2cute.SFInstrumentZone_parent_file(self)

    def has_parent_instrument(self):
        r"""has_parent_instrument(SFInstrumentZone self) -> bool"""
        return _sf2cute.SFInstrumentZone_has_parent_instrument(self)

    def parent_instrument(self):
        r"""parent_instrument(SFInstrumentZone self) -> SFInstrument"""
        return _sf2cute.SFInstrumentZone_parent_instrument(self)

# Register SFInstrumentZone in _sf2cute:
_sf2cute.SFInstrumentZone_swigregister(SFInstrumentZone)

class SFModulator(object):
    r"""Proxy of C++ sf2cute::SFModulator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFModulator self) -> SFModulator
        __init__(SFModulator self, uint16_t value) -> SFModulator

        Parameters
        ----------
        value: uint16_t

        __init__(SFModulator self, SFGeneralController controller, SFControllerDirection direction, SFControllerPolarity polarity, SFControllerType type) -> SFModulator

        Parameters
        ----------
        controller: SFGeneralController
        direction: SFControllerDirection
        polarity: SFControllerPolarity
        type: SFControllerType

        __init__(SFModulator self, SFMidiController controller, SFControllerDirection direction, SFControllerPolarity polarity, SFControllerType type) -> SFModulator

        Parameters
        ----------
        controller: SFMidiController
        direction: SFControllerDirection
        polarity: SFControllerPolarity
        type: SFControllerType

        __init__(SFModulator self, SFModulator origin) -> SFModulator

        Parameters
        ----------
        origin: sf2cute::SFModulator const &

        __init__(SFModulator self, SFModulator origin) -> SFModulator

        Parameters
        ----------
        origin: sf2cute::SFModulator &&

        """
        _sf2cute.SFModulator_swiginit(self, _sf2cute.new_SFModulator(*args))
    __swig_destroy__ = _sf2cute.delete_SFModulator

    def controller(self):
        r"""controller(SFModulator self) -> uint8_t"""
        return _sf2cute.SFModulator_controller(self)

    def general_controller(self):
        r"""general_controller(SFModulator self) -> SFGeneralController"""
        return _sf2cute.SFModulator_general_controller(self)

    def midi_controller(self):
        r"""midi_controller(SFModulator self) -> SFMidiController"""
        return _sf2cute.SFModulator_midi_controller(self)

    def set_controller(self, controller):
        r"""
        set_controller(SFModulator self, uint8_t controller)

        Parameters
        ----------
        controller: uint8_t

        """
        return _sf2cute.SFModulator_set_controller(self, controller)

    def set_general_controller(self, controller):
        r"""
        set_general_controller(SFModulator self, SFGeneralController controller)

        Parameters
        ----------
        controller: SFGeneralController

        """
        return _sf2cute.SFModulator_set_general_controller(self, controller)

    def set_midi_controller(self, controller):
        r"""
        set_midi_controller(SFModulator self, SFMidiController controller)

        Parameters
        ----------
        controller: SFMidiController

        """
        return _sf2cute.SFModulator_set_midi_controller(self, controller)

    def controller_palette(self):
        r"""controller_palette(SFModulator self) -> SFControllerPalette"""
        return _sf2cute.SFModulator_controller_palette(self)

    def set_controller_palette(self, controller_palette):
        r"""
        set_controller_palette(SFModulator self, SFControllerPalette controller_palette)

        Parameters
        ----------
        controller_palette: SFControllerPalette

        """
        return _sf2cute.SFModulator_set_controller_palette(self, controller_palette)

    def direction(self):
        r"""direction(SFModulator self) -> SFControllerDirection"""
        return _sf2cute.SFModulator_direction(self)

    def set_direction(self, direction):
        r"""
        set_direction(SFModulator self, SFControllerDirection direction)

        Parameters
        ----------
        direction: SFControllerDirection

        """
        return _sf2cute.SFModulator_set_direction(self, direction)

    def polarity(self):
        r"""polarity(SFModulator self) -> SFControllerPolarity"""
        return _sf2cute.SFModulator_polarity(self)

    def set_polarity(self, polarity):
        r"""
        set_polarity(SFModulator self, SFControllerPolarity polarity)

        Parameters
        ----------
        polarity: SFControllerPolarity

        """
        return _sf2cute.SFModulator_set_polarity(self, polarity)

    def type(self):
        r"""type(SFModulator self) -> SFControllerType"""
        return _sf2cute.SFModulator_type(self)

    def set_type(self, type):
        r"""
        set_type(SFModulator self, SFControllerType type)

        Parameters
        ----------
        type: SFControllerType

        """
        return _sf2cute.SFModulator_set_type(self, type)

# Register SFModulator in _sf2cute:
_sf2cute.SFModulator_swigregister(SFModulator)

class SFModulatorItem(object):
    r"""Proxy of C++ sf2cute::SFModulatorItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFModulatorItem self) -> SFModulatorItem
        __init__(SFModulatorItem self, SFModulator source_op, SFGenerator destination_op, int16_t amount, SFModulator amount_source_op, SFTransform transform_op) -> SFModulatorItem

        Parameters
        ----------
        source_op: sf2cute::SFModulator
        destination_op: SFGenerator
        amount: int16_t
        amount_source_op: sf2cute::SFModulator
        transform_op: SFTransform

        __init__(SFModulatorItem self, SFModulatorItem origin) -> SFModulatorItem

        Parameters
        ----------
        origin: sf2cute::SFModulatorItem const &

        __init__(SFModulatorItem self, SFModulatorItem origin) -> SFModulatorItem

        Parameters
        ----------
        origin: sf2cute::SFModulatorItem &&

        """
        _sf2cute.SFModulatorItem_swiginit(self, _sf2cute.new_SFModulatorItem(*args))
    __swig_destroy__ = _sf2cute.delete_SFModulatorItem

    def key(self):
        r"""key(SFModulatorItem self) -> SFModulatorKey"""
        return _sf2cute.SFModulatorItem_key(self)

    def set_key(self, key):
        r"""
        set_key(SFModulatorItem self, SFModulatorKey key)

        Parameters
        ----------
        key: SFModulatorKey

        """
        return _sf2cute.SFModulatorItem_set_key(self, key)

    def source_op(self):
        r"""source_op(SFModulatorItem self) -> SFModulator"""
        return _sf2cute.SFModulatorItem_source_op(self)

    def set_source_op(self, source_op):
        r"""
        set_source_op(SFModulatorItem self, SFModulator source_op)

        Parameters
        ----------
        source_op: sf2cute::SFModulator

        """
        return _sf2cute.SFModulatorItem_set_source_op(self, source_op)

    def destination_op(self):
        r"""destination_op(SFModulatorItem self) -> SFGenerator"""
        return _sf2cute.SFModulatorItem_destination_op(self)

    def set_destination_op(self, destination_op):
        r"""
        set_destination_op(SFModulatorItem self, SFGenerator destination_op)

        Parameters
        ----------
        destination_op: SFGenerator

        """
        return _sf2cute.SFModulatorItem_set_destination_op(self, destination_op)

    def amount(self):
        r"""amount(SFModulatorItem self) -> int16_t"""
        return _sf2cute.SFModulatorItem_amount(self)

    def set_amount(self, amount):
        r"""
        set_amount(SFModulatorItem self, int16_t amount)

        Parameters
        ----------
        amount: int16_t

        """
        return _sf2cute.SFModulatorItem_set_amount(self, amount)

    def amount_source_op(self):
        r"""amount_source_op(SFModulatorItem self) -> SFModulator"""
        return _sf2cute.SFModulatorItem_amount_source_op(self)

    def set_amount_source_op(self, amount_source_op):
        r"""
        set_amount_source_op(SFModulatorItem self, SFModulator amount_source_op)

        Parameters
        ----------
        amount_source_op: sf2cute::SFModulator

        """
        return _sf2cute.SFModulatorItem_set_amount_source_op(self, amount_source_op)

    def transform_op(self):
        r"""transform_op(SFModulatorItem self) -> SFTransform"""
        return _sf2cute.SFModulatorItem_transform_op(self)

    def set_transform_op(self, transform_op):
        r"""
        set_transform_op(SFModulatorItem self, SFTransform transform_op)

        Parameters
        ----------
        transform_op: SFTransform

        """
        return _sf2cute.SFModulatorItem_set_transform_op(self, transform_op)

# Register SFModulatorItem in _sf2cute:
_sf2cute.SFModulatorItem_swigregister(SFModulatorItem)

class SFModulatorKey(object):
    r"""Proxy of C++ sf2cute::SFModulatorKey class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFModulatorKey self) -> SFModulatorKey
        __init__(SFModulatorKey self, SFModulator source_op, SFGenerator destination_op, SFModulator amount_source_op) -> SFModulatorKey

        Parameters
        ----------
        source_op: sf2cute::SFModulator
        destination_op: SFGenerator
        amount_source_op: sf2cute::SFModulator

        __init__(SFModulatorKey self, SFModulatorKey origin) -> SFModulatorKey

        Parameters
        ----------
        origin: sf2cute::SFModulatorKey const &

        __init__(SFModulatorKey self, SFModulatorKey origin) -> SFModulatorKey

        Parameters
        ----------
        origin: sf2cute::SFModulatorKey &&

        """
        _sf2cute.SFModulatorKey_swiginit(self, _sf2cute.new_SFModulatorKey(*args))
    __swig_destroy__ = _sf2cute.delete_SFModulatorKey

    def source_op(self):
        r"""source_op(SFModulatorKey self) -> SFModulator"""
        return _sf2cute.SFModulatorKey_source_op(self)

    def set_source_op(self, source_op):
        r"""
        set_source_op(SFModulatorKey self, SFModulator source_op)

        Parameters
        ----------
        source_op: sf2cute::SFModulator

        """
        return _sf2cute.SFModulatorKey_set_source_op(self, source_op)

    def destination_op(self):
        r"""destination_op(SFModulatorKey self) -> SFGenerator"""
        return _sf2cute.SFModulatorKey_destination_op(self)

    def set_destination_op(self, destination_op):
        r"""
        set_destination_op(SFModulatorKey self, SFGenerator destination_op)

        Parameters
        ----------
        destination_op: SFGenerator

        """
        return _sf2cute.SFModulatorKey_set_destination_op(self, destination_op)

    def amount_source_op(self):
        r"""amount_source_op(SFModulatorKey self) -> SFModulator"""
        return _sf2cute.SFModulatorKey_amount_source_op(self)

    def set_amount_source_op(self, amount_source_op):
        r"""
        set_amount_source_op(SFModulatorKey self, SFModulator amount_source_op)

        Parameters
        ----------
        amount_source_op: sf2cute::SFModulator

        """
        return _sf2cute.SFModulatorKey_set_amount_source_op(self, amount_source_op)

# Register SFModulatorKey in _sf2cute:
_sf2cute.SFModulatorKey_swigregister(SFModulatorKey)

class SFPreset(object):
    r"""Proxy of C++ sf2cute::SFPreset class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFPreset self) -> SFPreset
        __init__(SFPreset self, std::string name) -> SFPreset

        Parameters
        ----------
        name: std::string

        __init__(SFPreset self, std::string name, uint16_t preset_number, uint16_t bank) -> SFPreset

        Parameters
        ----------
        name: std::string
        preset_number: uint16_t
        bank: uint16_t

        __init__(SFPreset self, std::string name, uint16_t preset_number, uint16_t bank, std::vector< sf2cute::SFPresetZone > zones) -> SFPreset

        Parameters
        ----------
        name: std::string
        preset_number: uint16_t
        bank: uint16_t
        zones: std::vector< sf2cute::SFPresetZone >

        __init__(SFPreset self, std::string name, uint16_t preset_number, uint16_t bank, std::vector< sf2cute::SFPresetZone > zones, SFPresetZone global_zone) -> SFPreset

        Parameters
        ----------
        name: std::string
        preset_number: uint16_t
        bank: uint16_t
        zones: std::vector< sf2cute::SFPresetZone >
        global_zone: sf2cute::SFPresetZone

        __init__(SFPreset self, SFPreset origin) -> SFPreset

        Parameters
        ----------
        origin: sf2cute::SFPreset const &

        __init__(SFPreset self, SFPreset origin) -> SFPreset

        Parameters
        ----------
        origin: sf2cute::SFPreset &&

        """
        _sf2cute.SFPreset_swiginit(self, _sf2cute.new_SFPreset(*args))
    __swig_destroy__ = _sf2cute.delete_SFPreset

    def name(self):
        r"""name(SFPreset self) -> std::string const &"""
        return _sf2cute.SFPreset_name(self)

    def set_name(self, name):
        r"""
        set_name(SFPreset self, std::string name)

        Parameters
        ----------
        name: std::string

        """
        return _sf2cute.SFPreset_set_name(self, name)

    def preset_number(self):
        r"""preset_number(SFPreset self) -> uint16_t"""
        return _sf2cute.SFPreset_preset_number(self)

    def set_preset_number(self, preset_number):
        r"""
        set_preset_number(SFPreset self, uint16_t preset_number)

        Parameters
        ----------
        preset_number: uint16_t

        """
        return _sf2cute.SFPreset_set_preset_number(self, preset_number)

    def bank(self):
        r"""bank(SFPreset self) -> uint16_t"""
        return _sf2cute.SFPreset_bank(self)

    def set_bank(self, bank):
        r"""
        set_bank(SFPreset self, uint16_t bank)

        Parameters
        ----------
        bank: uint16_t

        """
        return _sf2cute.SFPreset_set_bank(self, bank)

    def library(self):
        r"""library(SFPreset self) -> uint32_t"""
        return _sf2cute.SFPreset_library(self)

    def set_library(self, library):
        r"""
        set_library(SFPreset self, uint32_t library)

        Parameters
        ----------
        library: uint32_t

        """
        return _sf2cute.SFPreset_set_library(self, library)

    def genre(self):
        r"""genre(SFPreset self) -> uint32_t"""
        return _sf2cute.SFPreset_genre(self)

    def set_genre(self, genre):
        r"""
        set_genre(SFPreset self, uint32_t genre)

        Parameters
        ----------
        genre: uint32_t

        """
        return _sf2cute.SFPreset_set_genre(self, genre)

    def morphology(self):
        r"""morphology(SFPreset self) -> uint32_t"""
        return _sf2cute.SFPreset_morphology(self)

    def set_morphology(self, morphology):
        r"""
        set_morphology(SFPreset self, uint32_t morphology)

        Parameters
        ----------
        morphology: uint32_t

        """
        return _sf2cute.SFPreset_set_morphology(self, morphology)

    def zones(self):
        r"""zones(SFPreset self) -> std::vector< std::unique_ptr< sf2cute::SFPresetZone > > const &"""
        return _sf2cute.SFPreset_zones(self)

    def AddZone(self, zone):
        r"""
        AddZone(SFPreset self, SFPresetZone zone)

        Parameters
        ----------
        zone: sf2cute::SFPresetZone

        """
        return _sf2cute.SFPreset_AddZone(self, zone)

    def RemoveZone(self, *args):
        r"""
        RemoveZone(SFPreset self, std::vector< std::unique_ptr< sf2cute::SFPresetZone > >::const_iterator position)

        Parameters
        ----------
        position: std::vector< std::unique_ptr< sf2cute::SFPresetZone > >::const_iterator

        RemoveZone(SFPreset self, std::vector< std::unique_ptr< sf2cute::SFPresetZone > >::const_iterator first, std::vector< std::unique_ptr< sf2cute::SFPresetZone > >::const_iterator last)

        Parameters
        ----------
        first: std::vector< std::unique_ptr< sf2cute::SFPresetZone > >::const_iterator
        last: std::vector< std::unique_ptr< sf2cute::SFPresetZone > >::const_iterator

        """
        return _sf2cute.SFPreset_RemoveZone(self, *args)

    def RemoveZoneIf(self, predicate):
        r"""
        RemoveZoneIf(SFPreset self, std::function< bool (std::unique_ptr< sf2cute::SFPresetZone > const &) > predicate)

        Parameters
        ----------
        predicate: std::function< bool (std::unique_ptr< sf2cute::SFPresetZone > const &) >

        """
        return _sf2cute.SFPreset_RemoveZoneIf(self, predicate)

    def ClearZones(self):
        r"""ClearZones(SFPreset self)"""
        return _sf2cute.SFPreset_ClearZones(self)

    def has_global_zone(self):
        r"""has_global_zone(SFPreset self) -> bool"""
        return _sf2cute.SFPreset_has_global_zone(self)

    def global_zone(self):
        r"""global_zone(SFPreset self) -> SFPresetZone"""
        return _sf2cute.SFPreset_global_zone(self)

    def set_global_zone(self, global_zone):
        r"""
        set_global_zone(SFPreset self, SFPresetZone global_zone)

        Parameters
        ----------
        global_zone: sf2cute::SFPresetZone

        """
        return _sf2cute.SFPreset_set_global_zone(self, global_zone)

    def reset_global_zone(self):
        r"""reset_global_zone(SFPreset self)"""
        return _sf2cute.SFPreset_reset_global_zone(self)

    def has_parent_file(self):
        r"""has_parent_file(SFPreset self) -> bool"""
        return _sf2cute.SFPreset_has_parent_file(self)

    def parent_file(self):
        r"""parent_file(SFPreset self) -> SoundFont"""
        return _sf2cute.SFPreset_parent_file(self)

# Register SFPreset in _sf2cute:
_sf2cute.SFPreset_swigregister(SFPreset)

class SFPresetZone(object):
    r"""Proxy of C++ sf2cute::SFPresetZone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFPresetZone self) -> SFPresetZone
        __init__(SFPresetZone self, std::weak_ptr< sf2cute::SFInstrument > instrument) -> SFPresetZone

        Parameters
        ----------
        instrument: std::weak_ptr< sf2cute::SFInstrument >

        __init__(SFPresetZone self, std::weak_ptr< sf2cute::SFInstrument > instrument, std::vector< sf2cute::SFGeneratorItem > generators, std::vector< sf2cute::SFModulatorItem > modulators) -> SFPresetZone

        Parameters
        ----------
        instrument: std::weak_ptr< sf2cute::SFInstrument >
        generators: std::vector< sf2cute::SFGeneratorItem >
        modulators: std::vector< sf2cute::SFModulatorItem >

        __init__(SFPresetZone self, SFPresetZone origin) -> SFPresetZone

        Parameters
        ----------
        origin: sf2cute::SFPresetZone const &

        __init__(SFPresetZone self, SFPresetZone origin) -> SFPresetZone

        Parameters
        ----------
        origin: sf2cute::SFPresetZone &&

        """
        _sf2cute.SFPresetZone_swiginit(self, _sf2cute.new_SFPresetZone(*args))
    __swig_destroy__ = _sf2cute.delete_SFPresetZone

    def has_instrument(self):
        r"""has_instrument(SFPresetZone self) -> bool"""
        return _sf2cute.SFPresetZone_has_instrument(self)

    def instrument(self):
        r"""instrument(SFPresetZone self) -> std::shared_ptr< sf2cute::SFInstrument >"""
        return _sf2cute.SFPresetZone_instrument(self)

    def set_instrument(self, instrument):
        r"""
        set_instrument(SFPresetZone self, std::weak_ptr< sf2cute::SFInstrument > instrument)

        Parameters
        ----------
        instrument: std::weak_ptr< sf2cute::SFInstrument >

        """
        return _sf2cute.SFPresetZone_set_instrument(self, instrument)

    def reset_instrument(self):
        r"""reset_instrument(SFPresetZone self)"""
        return _sf2cute.SFPresetZone_reset_instrument(self)

    def has_parent_file(self):
        r"""has_parent_file(SFPresetZone self) -> bool"""
        return _sf2cute.SFPresetZone_has_parent_file(self)

    def parent_file(self):
        r"""parent_file(SFPresetZone self) -> SoundFont"""
        return _sf2cute.SFPresetZone_parent_file(self)

    def has_parent_preset(self):
        r"""has_parent_preset(SFPresetZone self) -> bool"""
        return _sf2cute.SFPresetZone_has_parent_preset(self)

    def parent_preset(self):
        r"""parent_preset(SFPresetZone self) -> SFPreset"""
        return _sf2cute.SFPresetZone_parent_preset(self)

# Register SFPresetZone in _sf2cute:
_sf2cute.SFPresetZone_swigregister(SFPresetZone)

class SFSample(object):
    r"""Proxy of C++ sf2cute::SFSample class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFSample self) -> SFSample
        __init__(SFSample self, std::string name) -> SFSample

        Parameters
        ----------
        name: std::string

        __init__(SFSample self, std::string name, std::vector< int16_t > data, uint32_t start_loop, uint32_t end_loop, uint32_t sample_rate, uint8_t original_key, int8_t correction) -> SFSample

        Parameters
        ----------
        name: std::string
        data: std::vector< int16_t >
        start_loop: uint32_t
        end_loop: uint32_t
        sample_rate: uint32_t
        original_key: uint8_t
        correction: int8_t

        __init__(SFSample self, std::string name, std::vector< int16_t > data, uint32_t start_loop, uint32_t end_loop, uint32_t sample_rate, uint8_t original_key, int8_t correction, std::weak_ptr< sf2cute::SFSample > link, SFSampleLink type) -> SFSample

        Parameters
        ----------
        name: std::string
        data: std::vector< int16_t >
        start_loop: uint32_t
        end_loop: uint32_t
        sample_rate: uint32_t
        original_key: uint8_t
        correction: int8_t
        link: std::weak_ptr< sf2cute::SFSample >
        type: SFSampleLink

        __init__(SFSample self, SFSample origin) -> SFSample

        Parameters
        ----------
        origin: sf2cute::SFSample const &

        __init__(SFSample self, SFSample origin) -> SFSample

        Parameters
        ----------
        origin: sf2cute::SFSample &&

        """
        _sf2cute.SFSample_swiginit(self, _sf2cute.new_SFSample(*args))
    __swig_destroy__ = _sf2cute.delete_SFSample

    def name(self):
        r"""name(SFSample self) -> std::string const &"""
        return _sf2cute.SFSample_name(self)

    def set_name(self, name):
        r"""
        set_name(SFSample self, std::string name)

        Parameters
        ----------
        name: std::string

        """
        return _sf2cute.SFSample_set_name(self, name)

    def start_loop(self):
        r"""start_loop(SFSample self) -> uint32_t"""
        return _sf2cute.SFSample_start_loop(self)

    def set_start_loop(self, start_loop):
        r"""
        set_start_loop(SFSample self, uint32_t start_loop)

        Parameters
        ----------
        start_loop: uint32_t

        """
        return _sf2cute.SFSample_set_start_loop(self, start_loop)

    def end_loop(self):
        r"""end_loop(SFSample self) -> uint32_t"""
        return _sf2cute.SFSample_end_loop(self)

    def set_end_loop(self, end_loop):
        r"""
        set_end_loop(SFSample self, uint32_t end_loop)

        Parameters
        ----------
        end_loop: uint32_t

        """
        return _sf2cute.SFSample_set_end_loop(self, end_loop)

    def sample_rate(self):
        r"""sample_rate(SFSample self) -> uint32_t"""
        return _sf2cute.SFSample_sample_rate(self)

    def set_sample_rate(self, sample_rate):
        r"""
        set_sample_rate(SFSample self, uint32_t sample_rate)

        Parameters
        ----------
        sample_rate: uint32_t

        """
        return _sf2cute.SFSample_set_sample_rate(self, sample_rate)

    def original_key(self):
        r"""original_key(SFSample self) -> uint8_t"""
        return _sf2cute.SFSample_original_key(self)

    def set_original_key(self, original_key):
        r"""
        set_original_key(SFSample self, uint8_t original_key)

        Parameters
        ----------
        original_key: uint8_t

        """
        return _sf2cute.SFSample_set_original_key(self, original_key)

    def correction(self):
        r"""correction(SFSample self) -> int8_t"""
        return _sf2cute.SFSample_correction(self)

    def set_correction(self, correction):
        r"""
        set_correction(SFSample self, int8_t correction)

        Parameters
        ----------
        correction: int8_t

        """
        return _sf2cute.SFSample_set_correction(self, correction)

    def link(self):
        r"""link(SFSample self) -> std::shared_ptr< sf2cute::SFSample >"""
        return _sf2cute.SFSample_link(self)

    def has_link(self):
        r"""has_link(SFSample self) -> bool"""
        return _sf2cute.SFSample_has_link(self)

    def set_link(self, link):
        r"""
        set_link(SFSample self, std::weak_ptr< sf2cute::SFSample > link)

        Parameters
        ----------
        link: std::weak_ptr< sf2cute::SFSample >

        """
        return _sf2cute.SFSample_set_link(self, link)

    def reset_link(self):
        r"""reset_link(SFSample self)"""
        return _sf2cute.SFSample_reset_link(self)

    def type(self):
        r"""type(SFSample self) -> SFSampleLink"""
        return _sf2cute.SFSample_type(self)

    def set_type(self, type):
        r"""
        set_type(SFSample self, SFSampleLink type)

        Parameters
        ----------
        type: SFSampleLink

        """
        return _sf2cute.SFSample_set_type(self, type)

    def data(self):
        r"""data(SFSample self) -> std::vector< int16_t > const &"""
        return _sf2cute.SFSample_data(self)

    def has_parent_file(self):
        r"""has_parent_file(SFSample self) -> bool"""
        return _sf2cute.SFSample_has_parent_file(self)

    def parent_file(self):
        r"""parent_file(SFSample self) -> SoundFont"""
        return _sf2cute.SFSample_parent_file(self)

# Register SFSample in _sf2cute:
_sf2cute.SFSample_swigregister(SFSample)

SFSampleLink_kMonoSample = _sf2cute.SFSampleLink_kMonoSample

SFSampleLink_kRightSample = _sf2cute.SFSampleLink_kRightSample

SFSampleLink_kLeftSample = _sf2cute.SFSampleLink_kLeftSample

SFSampleLink_kLinkedSample = _sf2cute.SFSampleLink_kLinkedSample

SFSampleLink_kRomMonoSample = _sf2cute.SFSampleLink_kRomMonoSample

SFSampleLink_kRomRightSample = _sf2cute.SFSampleLink_kRomRightSample

SFSampleLink_kRomLeftSample = _sf2cute.SFSampleLink_kRomLeftSample

SFSampleLink_kRomLinkedSample = _sf2cute.SFSampleLink_kRomLinkedSample

SFGenerator_kStartAddrsOffset = _sf2cute.SFGenerator_kStartAddrsOffset

SFGenerator_kEndAddrsOffset = _sf2cute.SFGenerator_kEndAddrsOffset

SFGenerator_kStartloopAddrsOffset = _sf2cute.SFGenerator_kStartloopAddrsOffset

SFGenerator_kEndloopAddrsOffset = _sf2cute.SFGenerator_kEndloopAddrsOffset

SFGenerator_kStartAddrsCoarseOffset = _sf2cute.SFGenerator_kStartAddrsCoarseOffset

SFGenerator_kModLfoToPitch = _sf2cute.SFGenerator_kModLfoToPitch

SFGenerator_kVibLfoToPitch = _sf2cute.SFGenerator_kVibLfoToPitch

SFGenerator_kModEnvToPitch = _sf2cute.SFGenerator_kModEnvToPitch

SFGenerator_kInitialFilterFc = _sf2cute.SFGenerator_kInitialFilterFc

SFGenerator_kInitialFilterQ = _sf2cute.SFGenerator_kInitialFilterQ

SFGenerator_kModLfoToFilterFc = _sf2cute.SFGenerator_kModLfoToFilterFc

SFGenerator_kModEnvToFilterFc = _sf2cute.SFGenerator_kModEnvToFilterFc

SFGenerator_kEndAddrsCoarseOffset = _sf2cute.SFGenerator_kEndAddrsCoarseOffset

SFGenerator_kModLfoToVolume = _sf2cute.SFGenerator_kModLfoToVolume

SFGenerator_kUnused1 = _sf2cute.SFGenerator_kUnused1

SFGenerator_kChorusEffectsSend = _sf2cute.SFGenerator_kChorusEffectsSend

SFGenerator_kReverbEffectsSend = _sf2cute.SFGenerator_kReverbEffectsSend

SFGenerator_kPan = _sf2cute.SFGenerator_kPan

SFGenerator_kUnused2 = _sf2cute.SFGenerator_kUnused2

SFGenerator_kUnused3 = _sf2cute.SFGenerator_kUnused3

SFGenerator_kUnused4 = _sf2cute.SFGenerator_kUnused4

SFGenerator_kDelayModLFO = _sf2cute.SFGenerator_kDelayModLFO

SFGenerator_kFreqModLFO = _sf2cute.SFGenerator_kFreqModLFO

SFGenerator_kDelayVibLFO = _sf2cute.SFGenerator_kDelayVibLFO

SFGenerator_kFreqVibLFO = _sf2cute.SFGenerator_kFreqVibLFO

SFGenerator_kDelayModEnv = _sf2cute.SFGenerator_kDelayModEnv

SFGenerator_kAttackModEnv = _sf2cute.SFGenerator_kAttackModEnv

SFGenerator_kHoldModEnv = _sf2cute.SFGenerator_kHoldModEnv

SFGenerator_kDecayModEnv = _sf2cute.SFGenerator_kDecayModEnv

SFGenerator_kSustainModEnv = _sf2cute.SFGenerator_kSustainModEnv

SFGenerator_kReleaseModEnv = _sf2cute.SFGenerator_kReleaseModEnv

SFGenerator_kKeynumToModEnvHold = _sf2cute.SFGenerator_kKeynumToModEnvHold

SFGenerator_kKeynumToModEnvDecay = _sf2cute.SFGenerator_kKeynumToModEnvDecay

SFGenerator_kDelayVolEnv = _sf2cute.SFGenerator_kDelayVolEnv

SFGenerator_kAttackVolEnv = _sf2cute.SFGenerator_kAttackVolEnv

SFGenerator_kHoldVolEnv = _sf2cute.SFGenerator_kHoldVolEnv

SFGenerator_kDecayVolEnv = _sf2cute.SFGenerator_kDecayVolEnv

SFGenerator_kSustainVolEnv = _sf2cute.SFGenerator_kSustainVolEnv

SFGenerator_kReleaseVolEnv = _sf2cute.SFGenerator_kReleaseVolEnv

SFGenerator_kKeynumToVolEnvHold = _sf2cute.SFGenerator_kKeynumToVolEnvHold

SFGenerator_kKeynumToVolEnvDecay = _sf2cute.SFGenerator_kKeynumToVolEnvDecay

SFGenerator_kInstrument = _sf2cute.SFGenerator_kInstrument

SFGenerator_kReserved1 = _sf2cute.SFGenerator_kReserved1

SFGenerator_kKeyRange = _sf2cute.SFGenerator_kKeyRange

SFGenerator_kVelRange = _sf2cute.SFGenerator_kVelRange

SFGenerator_kStartloopAddrsCoarseOffset = _sf2cute.SFGenerator_kStartloopAddrsCoarseOffset

SFGenerator_kKeynum = _sf2cute.SFGenerator_kKeynum

SFGenerator_kVelocity = _sf2cute.SFGenerator_kVelocity

SFGenerator_kInitialAttenuation = _sf2cute.SFGenerator_kInitialAttenuation

SFGenerator_kReserved2 = _sf2cute.SFGenerator_kReserved2

SFGenerator_kEndloopAddrsCoarseOffset = _sf2cute.SFGenerator_kEndloopAddrsCoarseOffset

SFGenerator_kCoarseTune = _sf2cute.SFGenerator_kCoarseTune

SFGenerator_kFineTune = _sf2cute.SFGenerator_kFineTune

SFGenerator_kSampleID = _sf2cute.SFGenerator_kSampleID

SFGenerator_kSampleModes = _sf2cute.SFGenerator_kSampleModes

SFGenerator_kReserved3 = _sf2cute.SFGenerator_kReserved3

SFGenerator_kScaleTuning = _sf2cute.SFGenerator_kScaleTuning

SFGenerator_kExclusiveClass = _sf2cute.SFGenerator_kExclusiveClass

SFGenerator_kOverridingRootKey = _sf2cute.SFGenerator_kOverridingRootKey

SFGenerator_kUnused5 = _sf2cute.SFGenerator_kUnused5

SFGenerator_kEndOper = _sf2cute.SFGenerator_kEndOper

SFGeneralController_kNoController = _sf2cute.SFGeneralController_kNoController

SFGeneralController_kNoteOnVelocity = _sf2cute.SFGeneralController_kNoteOnVelocity

SFGeneralController_kNoteOnKeyNumber = _sf2cute.SFGeneralController_kNoteOnKeyNumber

SFGeneralController_kPolyPressure = _sf2cute.SFGeneralController_kPolyPressure

SFGeneralController_kChannelPressure = _sf2cute.SFGeneralController_kChannelPressure

SFGeneralController_kPitchWheel = _sf2cute.SFGeneralController_kPitchWheel

SFGeneralController_kPitchWheelSensitivity = _sf2cute.SFGeneralController_kPitchWheelSensitivity

SFGeneralController_kLink = _sf2cute.SFGeneralController_kLink

SFMidiController_kBankSelect = _sf2cute.SFMidiController_kBankSelect

SFMidiController_kModulationDepth = _sf2cute.SFMidiController_kModulationDepth

SFMidiController_kController2 = _sf2cute.SFMidiController_kController2

SFMidiController_kController3 = _sf2cute.SFMidiController_kController3

SFMidiController_kController4 = _sf2cute.SFMidiController_kController4

SFMidiController_kPortamentoTime = _sf2cute.SFMidiController_kPortamentoTime

SFMidiController_kDataEntry = _sf2cute.SFMidiController_kDataEntry

SFMidiController_kChannelVolume = _sf2cute.SFMidiController_kChannelVolume

SFMidiController_kController8 = _sf2cute.SFMidiController_kController8

SFMidiController_kController9 = _sf2cute.SFMidiController_kController9

SFMidiController_kPan = _sf2cute.SFMidiController_kPan

SFMidiController_kExpression = _sf2cute.SFMidiController_kExpression

SFMidiController_kController12 = _sf2cute.SFMidiController_kController12

SFMidiController_kController13 = _sf2cute.SFMidiController_kController13

SFMidiController_kController14 = _sf2cute.SFMidiController_kController14

SFMidiController_kController15 = _sf2cute.SFMidiController_kController15

SFMidiController_kController16 = _sf2cute.SFMidiController_kController16

SFMidiController_kController17 = _sf2cute.SFMidiController_kController17

SFMidiController_kController18 = _sf2cute.SFMidiController_kController18

SFMidiController_kController19 = _sf2cute.SFMidiController_kController19

SFMidiController_kController20 = _sf2cute.SFMidiController_kController20

SFMidiController_kController21 = _sf2cute.SFMidiController_kController21

SFMidiController_kController22 = _sf2cute.SFMidiController_kController22

SFMidiController_kController23 = _sf2cute.SFMidiController_kController23

SFMidiController_kController24 = _sf2cute.SFMidiController_kController24

SFMidiController_kController25 = _sf2cute.SFMidiController_kController25

SFMidiController_kController26 = _sf2cute.SFMidiController_kController26

SFMidiController_kController27 = _sf2cute.SFMidiController_kController27

SFMidiController_kController28 = _sf2cute.SFMidiController_kController28

SFMidiController_kController29 = _sf2cute.SFMidiController_kController29

SFMidiController_kController30 = _sf2cute.SFMidiController_kController30

SFMidiController_kController31 = _sf2cute.SFMidiController_kController31

SFMidiController_kBankSelectLSB = _sf2cute.SFMidiController_kBankSelectLSB

SFMidiController_kController33 = _sf2cute.SFMidiController_kController33

SFMidiController_kController34 = _sf2cute.SFMidiController_kController34

SFMidiController_kController35 = _sf2cute.SFMidiController_kController35

SFMidiController_kController36 = _sf2cute.SFMidiController_kController36

SFMidiController_kController37 = _sf2cute.SFMidiController_kController37

SFMidiController_kDataEntryLSB = _sf2cute.SFMidiController_kDataEntryLSB

SFMidiController_kController39 = _sf2cute.SFMidiController_kController39

SFMidiController_kController40 = _sf2cute.SFMidiController_kController40

SFMidiController_kController41 = _sf2cute.SFMidiController_kController41

SFMidiController_kController42 = _sf2cute.SFMidiController_kController42

SFMidiController_kController43 = _sf2cute.SFMidiController_kController43

SFMidiController_kController44 = _sf2cute.SFMidiController_kController44

SFMidiController_kController45 = _sf2cute.SFMidiController_kController45

SFMidiController_kController46 = _sf2cute.SFMidiController_kController46

SFMidiController_kController47 = _sf2cute.SFMidiController_kController47

SFMidiController_kController48 = _sf2cute.SFMidiController_kController48

SFMidiController_kController49 = _sf2cute.SFMidiController_kController49

SFMidiController_kController50 = _sf2cute.SFMidiController_kController50

SFMidiController_kController51 = _sf2cute.SFMidiController_kController51

SFMidiController_kController52 = _sf2cute.SFMidiController_kController52

SFMidiController_kController53 = _sf2cute.SFMidiController_kController53

SFMidiController_kController54 = _sf2cute.SFMidiController_kController54

SFMidiController_kController55 = _sf2cute.SFMidiController_kController55

SFMidiController_kController56 = _sf2cute.SFMidiController_kController56

SFMidiController_kController57 = _sf2cute.SFMidiController_kController57

SFMidiController_kController58 = _sf2cute.SFMidiController_kController58

SFMidiController_kController59 = _sf2cute.SFMidiController_kController59

SFMidiController_kController60 = _sf2cute.SFMidiController_kController60

SFMidiController_kController61 = _sf2cute.SFMidiController_kController61

SFMidiController_kController62 = _sf2cute.SFMidiController_kController62

SFMidiController_kController63 = _sf2cute.SFMidiController_kController63

SFMidiController_kHold = _sf2cute.SFMidiController_kHold

SFMidiController_kPortamento = _sf2cute.SFMidiController_kPortamento

SFMidiController_kSostenuto = _sf2cute.SFMidiController_kSostenuto

SFMidiController_kSoft = _sf2cute.SFMidiController_kSoft

SFMidiController_kController68 = _sf2cute.SFMidiController_kController68

SFMidiController_kController69 = _sf2cute.SFMidiController_kController69

SFMidiController_kController70 = _sf2cute.SFMidiController_kController70

SFMidiController_kFilterResonance = _sf2cute.SFMidiController_kFilterResonance

SFMidiController_kReleaseTime = _sf2cute.SFMidiController_kReleaseTime

SFMidiController_kAttackTime = _sf2cute.SFMidiController_kAttackTime

SFMidiController_kBrightness = _sf2cute.SFMidiController_kBrightness

SFMidiController_kDecayTime = _sf2cute.SFMidiController_kDecayTime

SFMidiController_kVibratoRate = _sf2cute.SFMidiController_kVibratoRate

SFMidiController_kVibratoDepth = _sf2cute.SFMidiController_kVibratoDepth

SFMidiController_kVibratoDelay = _sf2cute.SFMidiController_kVibratoDelay

SFMidiController_kController79 = _sf2cute.SFMidiController_kController79

SFMidiController_kController80 = _sf2cute.SFMidiController_kController80

SFMidiController_kController81 = _sf2cute.SFMidiController_kController81

SFMidiController_kController82 = _sf2cute.SFMidiController_kController82

SFMidiController_kController83 = _sf2cute.SFMidiController_kController83

SFMidiController_kController84 = _sf2cute.SFMidiController_kController84

SFMidiController_kController85 = _sf2cute.SFMidiController_kController85

SFMidiController_kController86 = _sf2cute.SFMidiController_kController86

SFMidiController_kController87 = _sf2cute.SFMidiController_kController87

SFMidiController_kController88 = _sf2cute.SFMidiController_kController88

SFMidiController_kController89 = _sf2cute.SFMidiController_kController89

SFMidiController_kController90 = _sf2cute.SFMidiController_kController90

SFMidiController_kReverbSendLevel = _sf2cute.SFMidiController_kReverbSendLevel

SFMidiController_kController92 = _sf2cute.SFMidiController_kController92

SFMidiController_kChorusSendLevel = _sf2cute.SFMidiController_kChorusSendLevel

SFMidiController_kController94 = _sf2cute.SFMidiController_kController94

SFMidiController_kController95 = _sf2cute.SFMidiController_kController95

SFMidiController_kController96 = _sf2cute.SFMidiController_kController96

SFMidiController_kController97 = _sf2cute.SFMidiController_kController97

SFMidiController_kNRPNLSB = _sf2cute.SFMidiController_kNRPNLSB

SFMidiController_kNRPNMSB = _sf2cute.SFMidiController_kNRPNMSB

SFMidiController_kRPNLSB = _sf2cute.SFMidiController_kRPNLSB

SFMidiController_kRPNMSB = _sf2cute.SFMidiController_kRPNMSB

SFMidiController_kController102 = _sf2cute.SFMidiController_kController102

SFMidiController_kController103 = _sf2cute.SFMidiController_kController103

SFMidiController_kController104 = _sf2cute.SFMidiController_kController104

SFMidiController_kController105 = _sf2cute.SFMidiController_kController105

SFMidiController_kController106 = _sf2cute.SFMidiController_kController106

SFMidiController_kController107 = _sf2cute.SFMidiController_kController107

SFMidiController_kController108 = _sf2cute.SFMidiController_kController108

SFMidiController_kController109 = _sf2cute.SFMidiController_kController109

SFMidiController_kController110 = _sf2cute.SFMidiController_kController110

SFMidiController_kController111 = _sf2cute.SFMidiController_kController111

SFMidiController_kController112 = _sf2cute.SFMidiController_kController112

SFMidiController_kController113 = _sf2cute.SFMidiController_kController113

SFMidiController_kController114 = _sf2cute.SFMidiController_kController114

SFMidiController_kController115 = _sf2cute.SFMidiController_kController115

SFMidiController_kController116 = _sf2cute.SFMidiController_kController116

SFMidiController_kController117 = _sf2cute.SFMidiController_kController117

SFMidiController_kController118 = _sf2cute.SFMidiController_kController118

SFMidiController_kController119 = _sf2cute.SFMidiController_kController119

SFMidiController_kAllSoundOff = _sf2cute.SFMidiController_kAllSoundOff

SFMidiController_kResetAllController = _sf2cute.SFMidiController_kResetAllController

SFMidiController_kController122 = _sf2cute.SFMidiController_kController122

SFMidiController_kAllNotesOff = _sf2cute.SFMidiController_kAllNotesOff

SFMidiController_kOmniModeOff = _sf2cute.SFMidiController_kOmniModeOff

SFMidiController_kOmniModeOn = _sf2cute.SFMidiController_kOmniModeOn

SFMidiController_kMonoModeOn = _sf2cute.SFMidiController_kMonoModeOn

SFMidiController_kPolyModeOn = _sf2cute.SFMidiController_kPolyModeOn

SFControllerPalette_kGeneralController = _sf2cute.SFControllerPalette_kGeneralController

SFControllerPalette_kMidiController = _sf2cute.SFControllerPalette_kMidiController

SFControllerDirection_kIncrease = _sf2cute.SFControllerDirection_kIncrease

SFControllerDirection_kDecrease = _sf2cute.SFControllerDirection_kDecrease

SFControllerPolarity_kUnipolar = _sf2cute.SFControllerPolarity_kUnipolar

SFControllerPolarity_kBipolar = _sf2cute.SFControllerPolarity_kBipolar

SFControllerType_kLinear = _sf2cute.SFControllerType_kLinear

SFControllerType_kConcave = _sf2cute.SFControllerType_kConcave

SFControllerType_kConvex = _sf2cute.SFControllerType_kConvex

SFControllerType_kSwitch = _sf2cute.SFControllerType_kSwitch

SFTransform_kLinear = _sf2cute.SFTransform_kLinear

SFTransform_kAbsoluteValue = _sf2cute.SFTransform_kAbsoluteValue

SampleMode_kNoLoop = _sf2cute.SampleMode_kNoLoop

SampleMode_kLoopContinuously = _sf2cute.SampleMode_kLoopContinuously

SampleMode_kUnusedNoLoop = _sf2cute.SampleMode_kUnusedNoLoop

SampleMode_kLoopEndsByKeyDepression = _sf2cute.SampleMode_kLoopEndsByKeyDepression

class RangesType(object):
    r"""Proxy of C++ sf2cute::RangesType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RangesType self) -> RangesType
        __init__(RangesType self, uint8_t lo, uint8_t hi) -> RangesType

        Parameters
        ----------
        lo: uint8_t
        hi: uint8_t

        """
        _sf2cute.RangesType_swiginit(self, _sf2cute.new_RangesType(*args))
    lo = property(_sf2cute.RangesType_lo_get, _sf2cute.RangesType_lo_set, doc=r"""lo : uint8_t""")
    hi = property(_sf2cute.RangesType_hi_get, _sf2cute.RangesType_hi_set, doc=r"""hi : uint8_t""")
    __swig_destroy__ = _sf2cute.delete_RangesType

# Register RangesType in _sf2cute:
_sf2cute.RangesType_swigregister(RangesType)

class GenAmountType(object):
    r"""Proxy of C++ sf2cute::GenAmountType class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GenAmountType self) -> GenAmountType
        __init__(GenAmountType self, RangesType range) -> GenAmountType

        Parameters
        ----------
        range: sf2cute::RangesType

        __init__(GenAmountType self, int16_t value) -> GenAmountType

        Parameters
        ----------
        value: int16_t

        """
        _sf2cute.GenAmountType_swiginit(self, _sf2cute.new_GenAmountType(*args))
    range = property(_sf2cute.GenAmountType_range_get, _sf2cute.GenAmountType_range_set, doc=r"""range : sf2cute::RangesType""")
    value = property(_sf2cute.GenAmountType_value_get, _sf2cute.GenAmountType_value_set, doc=r"""value : int16_t""")
    uvalue = property(_sf2cute.GenAmountType_uvalue_get, _sf2cute.GenAmountType_uvalue_set, doc=r"""uvalue : uint16_t""")
    __swig_destroy__ = _sf2cute.delete_GenAmountType

# Register GenAmountType in _sf2cute:
_sf2cute.GenAmountType_swigregister(GenAmountType)

class SFVersionTag(object):
    r"""Proxy of C++ sf2cute::SFVersionTag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFVersionTag self) -> SFVersionTag
        __init__(SFVersionTag self, uint16_t major_version, uint16_t minor_version) -> SFVersionTag

        Parameters
        ----------
        major_version: uint16_t
        minor_version: uint16_t

        """
        _sf2cute.SFVersionTag_swiginit(self, _sf2cute.new_SFVersionTag(*args))

    def to_string(self):
        r"""to_string(SFVersionTag self) -> std::string"""
        return _sf2cute.SFVersionTag_to_string(self)
    major_version = property(_sf2cute.SFVersionTag_major_version_get, _sf2cute.SFVersionTag_major_version_set, doc=r"""major_version : uint16_t""")
    minor_version = property(_sf2cute.SFVersionTag_minor_version_get, _sf2cute.SFVersionTag_minor_version_set, doc=r"""minor_version : uint16_t""")
    __swig_destroy__ = _sf2cute.delete_SFVersionTag

# Register SFVersionTag in _sf2cute:
_sf2cute.SFVersionTag_swigregister(SFVersionTag)

SF2CUTE_VERSION = _sf2cute.SF2CUTE_VERSION

class SFZone(object):
    r"""Proxy of C++ sf2cute::SFZone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SFZone self) -> SFZone
        __init__(SFZone self, std::vector< sf2cute::SFGeneratorItem > generators, std::vector< sf2cute::SFModulatorItem > modulators) -> SFZone

        Parameters
        ----------
        generators: std::vector< sf2cute::SFGeneratorItem >
        modulators: std::vector< sf2cute::SFModulatorItem >

        __init__(SFZone self, SFZone origin) -> SFZone

        Parameters
        ----------
        origin: sf2cute::SFZone const &

        __init__(SFZone self, SFZone origin) -> SFZone

        Parameters
        ----------
        origin: sf2cute::SFZone &&

        """
        _sf2cute.SFZone_swiginit(self, _sf2cute.new_SFZone(*args))
    __swig_destroy__ = _sf2cute.delete_SFZone

    def generators(self):
        r"""generators(SFZone self) -> std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > > const &"""
        return _sf2cute.SFZone_generators(self)

    def SetGenerator(self, generator):
        r"""
        SetGenerator(SFZone self, SFGeneratorItem generator)

        Parameters
        ----------
        generator: sf2cute::SFGeneratorItem

        """
        return _sf2cute.SFZone_SetGenerator(self, generator)

    def FindGenerator(self, op):
        r"""
        FindGenerator(SFZone self, sf2cute::SFGenerator op) -> std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > >::const_iterator const

        Parameters
        ----------
        op: enum sf2cute::SFGenerator

        """
        return _sf2cute.SFZone_FindGenerator(self, op)

    def RemoveGenerator(self, *args):
        r"""
        RemoveGenerator(SFZone self, std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > >::const_iterator position)

        Parameters
        ----------
        position: std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > >::const_iterator

        RemoveGenerator(SFZone self, std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > >::const_iterator first, std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > >::const_iterator last)

        Parameters
        ----------
        first: std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > >::const_iterator
        last: std::vector< std::unique_ptr< sf2cute::SFGeneratorItem > >::const_iterator

        """
        return _sf2cute.SFZone_RemoveGenerator(self, *args)

    def RemoveGeneratorIf(self, predicate):
        r"""
        RemoveGeneratorIf(SFZone self, std::function< bool (std::unique_ptr< sf2cute::SFGeneratorItem > const &) > predicate)

        Parameters
        ----------
        predicate: std::function< bool (std::unique_ptr< sf2cute::SFGeneratorItem > const &) >

        """
        return _sf2cute.SFZone_RemoveGeneratorIf(self, predicate)

    def ClearGenerators(self):
        r"""ClearGenerators(SFZone self)"""
        return _sf2cute.SFZone_ClearGenerators(self)

    def modulators(self):
        r"""modulators(SFZone self) -> std::vector< std::unique_ptr< sf2cute::SFModulatorItem > > const &"""
        return _sf2cute.SFZone_modulators(self)

    def SetModulator(self, modulator):
        r"""
        SetModulator(SFZone self, SFModulatorItem modulator)

        Parameters
        ----------
        modulator: sf2cute::SFModulatorItem

        """
        return _sf2cute.SFZone_SetModulator(self, modulator)

    def FindModulator(self, key):
        r"""
        FindModulator(SFZone self, SFModulatorKey key) -> std::vector< std::unique_ptr< sf2cute::SFModulatorItem > >::const_iterator const

        Parameters
        ----------
        key: sf2cute::SFModulatorKey

        """
        return _sf2cute.SFZone_FindModulator(self, key)

    def RemoveModulator(self, *args):
        r"""
        RemoveModulator(SFZone self, std::vector< std::unique_ptr< sf2cute::SFModulatorItem > >::const_iterator position)

        Parameters
        ----------
        position: std::vector< std::unique_ptr< sf2cute::SFModulatorItem > >::const_iterator

        RemoveModulator(SFZone self, std::vector< std::unique_ptr< sf2cute::SFModulatorItem > >::const_iterator first, std::vector< std::unique_ptr< sf2cute::SFModulatorItem > >::const_iterator last)

        Parameters
        ----------
        first: std::vector< std::unique_ptr< sf2cute::SFModulatorItem > >::const_iterator
        last: std::vector< std::unique_ptr< sf2cute::SFModulatorItem > >::const_iterator

        """
        return _sf2cute.SFZone_RemoveModulator(self, *args)

    def RemoveModulatorIf(self, predicate):
        r"""
        RemoveModulatorIf(SFZone self, std::function< bool (std::unique_ptr< sf2cute::SFModulatorItem > const &) > predicate)

        Parameters
        ----------
        predicate: std::function< bool (std::unique_ptr< sf2cute::SFModulatorItem > const &) >

        """
        return _sf2cute.SFZone_RemoveModulatorIf(self, predicate)

    def ClearModulators(self):
        r"""ClearModulators(SFZone self)"""
        return _sf2cute.SFZone_ClearModulators(self)

# Register SFZone in _sf2cute:
_sf2cute.SFZone_swigregister(SFZone)



